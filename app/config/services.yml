# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    app.film.usecase.newfilm:
        class: Bundle\FilmBundle\Application\Usecase\CreateFilm
        public: true
        arguments:
            $filmRepository: '@app.film.repository'
            $actorRepository: '@app.actor.repository'
            $dispatcher: '@event_dispatcher'
    app.film.usecase.readfilm:
        class: Bundle\FilmBundle\Application\Usecase\ReadFilm
        public: true
        arguments:
            $filmRepository: '@app.film.repository'
            $dispatcher: '@event_dispatcher'
    app.film.usecase.updatefilm:
        class: Bundle\FilmBundle\Application\Usecase\UpdateFilm
        public: true
        arguments:
            $filmRepository: '@app.film.repository'
            $actorRepository: '@app.actor.repository'
            $dispatcher: '@event_dispatcher'
    app.film.usecase.deletefilm:
        class: Bundle\FilmBundle\Application\Usecase\DeleteFilm
        public: true
        arguments:
            $filmRepository: '@app.film.repository'
            $dispatcher: '@event_dispatcher'
    app.actor.usecase.newactor:
        class: Bundle\ActorBundle\Application\Usecase\CreateActor
        public: true
        arguments:
            $actorRepository: '@app.actor.repository'
            $dispatcher: '@event_dispatcher'
    app.film.repository:
        class: Bundle\FilmBundle\Infraestructure\Repository\FilmRepository
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
    app.actor.repository:
        class: Bundle\ActorBundle\Infraestructure\Repository\ActorRepository
        arguments:
            $entityManager: '@doctrine.orm.entity_manager'
    console.command.actor.create:
        class: Bundle\ActorBundle\Application\Command\CreateActorCommand
        arguments:
            $createActorCase: '@app.actor.usecase.newactor'
        tags: ['console.command']
    console.command.film.create:
        class: Bundle\FilmBundle\Application\Command\CreateFilmCommand
        arguments:
            $createFilmCase: '@app.film.usecase.newfilm'
        tags: ['console.command']
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
