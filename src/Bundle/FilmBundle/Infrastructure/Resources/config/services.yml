services:

  film.controller.list_films:
    class: Bundle\FilmBundle\Infrastructure\http\Controller\ListFilmsController
    public: true
    arguments:
      $readFilmCase: '@app.film.usecase.readfilm'
  film.controller.list_film_details:
    class: Bundle\FilmBundle\Infrastructure\http\Controller\ListFilmDetailsController
    public: true
    arguments:
      $filmRepository: '@app.film.repository.cached'

  film.controller.api.create_film:
    class: Bundle\FilmBundle\Infrastructure\http\Api\Controller\CreateFilmController
    public: true
    arguments:
      $createFilmCase: '@app.film.usecase.newfilm'
  film.controller.api.list_films:
    class: Bundle\FilmBundle\Infrastructure\http\Api\Controller\ListFilmsController
    public: true
    arguments:
      $readFilmCase: '@app.film.usecase.readfilm'
  film.controller.api.update_film:
    class: Bundle\FilmBundle\Infrastructure\http\Api\Controller\UpdateFilmController
    public: true
    arguments:
      $updateFilmCase: '@app.film.usecase.updatefilm'
  film.controller.api.delete_film:
    class: Bundle\FilmBundle\Infrastructure\http\Api\Controller\DeleteFilmController
    public: true
    arguments:
      $deleteFilmCase: '@app.film.usecase.deletefilm'

  app.film.usecase.newfilm:
    class: Bundle\FilmBundle\Application\Usecase\CreateFilm
    public: true
    arguments:
      $filmRepository: '@app.film.repository.cached'
      $actorRepository: '@app.actor.repository'
      $dispatcher: '@event_dispatcher'
  app.film.usecase.readfilm:
    class: Bundle\FilmBundle\Application\Usecase\ReadFilm
    public: true
    arguments:
      $filmRepository: '@app.film.repository.cached'
      $dispatcher: '@event_dispatcher'
  app.film.usecase.updatefilm:
    class: Bundle\FilmBundle\Application\Usecase\UpdateFilm
    public: true
    arguments:
      $filmRepository: '@app.film.repository.cached'
      $actorRepository: '@app.actor.repository'
      $dispatcher: '@event_dispatcher'
  app.film.usecase.deletefilm:
    class: Bundle\FilmBundle\Application\Usecase\DeleteFilm
    public: true
    arguments:
      $filmRepository: '@app.film.repository.cached'
      $dispatcher: '@event_dispatcher'

  app.film.repository:
    class: Bundle\FilmBundle\Infrastructure\Repository\FilmRepository
    arguments:
      $entityManager: '@doctrine.orm.entity_manager'
  app.film.repository.cached:
    class: Bundle\FilmBundle\Infrastructure\Repository\CachedFilmRepository
    decorates: app.film.repository
    arguments:
      $filmRepository: '@app.film.repository.cached.inner'
      $cache: '@cache.app'

  console.command.film.create:
    class: Bundle\FilmBundle\Application\Command\CreateFilmCommand
    arguments:
      $createFilmCase: '@app.film.usecase.newfilm'
    tags: ['console.command']
  console.command.film.read:
    class: Bundle\FilmBundle\Application\Command\ReadFilmCommand
    arguments:
      $readFilmCase: '@app.film.usecase.readfilm'
    tags: ['console.command']
  console.command.film.update:
    class: Bundle\FilmBundle\Application\Command\UpdateFilmCommand
    arguments:
      $updateFilmCase: '@app.film.usecase.updatefilm'
    tags: ['console.command']
  console.command.film.delete:
    class: Bundle\FilmBundle\Application\Command\DeleteFilmCommand
    arguments:
      $deleteFilmCase: '@app.film.usecase.deletefilm'
    tags: ['console.command']

  # default configuration for services in *this* file
  _defaults:
    # automatically injects dependencies in your services
    autowire: true
    # automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # this means you cannot fetch services directly from the container via $container->get()
    # if you need to do this, you can override this setting on individual services
    public: false